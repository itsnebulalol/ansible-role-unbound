---
- name: Create /usr/local/src directory if it doesn't exist
  file:
    path: /usr/local/src/
    state: directory

- name: Install openssl git gcc pip python-dev libffi libssl/openssl-devel
  package:
    name: "{{item}}"
    state: present
  with_items:
    - openssl
    - git
    - gcc
    - "{{_unbound.pip | default('openssl')}}"
    - "{{_unbound.python_dev | default('openssl')}}"
    - "{{_unbound.libffi_dev | default('openssl')}}"
    - "{{_unbound.openssl_dev | default('openssl')}}"
# when: ansible_os_family == 'Ubuntu' and ansible_os_family == 'RedHat'

- name: Upgrade pip
  pip:
    name: pip
    state: latest
  tags:
    - skip_ansible_lint
  when: not ansible_check_mode

# consider move to /opt directory?
- name: Get dehydrated a letsencrypt/acme shell-script
  git:
    repo: https://github.com/lukas2511/dehydrated.git
    dest: "{{unbound_tls_dehydrated_src}}"

- name: Symlink dehydrated to /usr/local/sbin
  file:
    src: "{{unbound_tls_dehydrated_src}}/dehydrated"
    dest: /usr/local/sbin/dehydrated
    state: link
    mode: 0755

- name: Create dehydrated/hooks directory if it doesn't exist
  file:
    path: "{{unbound_tls_dehydrated_src}}/hooks"
    state: directory

- name: Get letsencrypt cloudflare hook (dehydrated/hooks/cloudflare)
  git:
    repo: https://github.com/kappataumu/letsencrypt-cloudflare-hook
    dest: "{{unbound_tls_dehydrated_src}}/hooks/cloudflare"

- name: Get pip requirements - python3
  pip:
    requirements: "{{unbound_tls_dehydrated_src}}/hooks/cloudflare/requirements.txt"
  when: ansible_python.version.major == 3

- name: Get pip requirements - python2
  pip:
    requirements: "{{unbound_tls_dehydrated_src}}/hooks/cloudflare/requirements-python-2.txt"
  when: ansible_python.version.major == 2

- name: Create etc/dehydrated directory if it doesn't exist
  file:
    path: "{{unbound_tls_dehydrated_etc}}"
    state: directory

- name: Copy dehydrated configuration
  template:
    src: config
    dest: "{{unbound_tls_dehydrated_etc}}/config"

- name: Copy dehydrated domains.txt
  template:
    src: domains.txt
    dest: "{{unbound_tls_dehydrated_etc}}/domains.txt"

- name: Create certificate with ./dehydrated
  command: "{{unbound_tls_dehydrated_src}}/dehydrated -c --accept-terms"
  args:
    creates: "{{unbound_tls_dehydrated_etc}}/certs/{{unbound_tls_domain}}/fullchain.pem"
  notify: Restart unbound

- name: Symlink privkey.pem
  file:
    src: "{{unbound_tls_dehydrated_etc}}/certs/{{unbound_tls_domain}}/privkey.pem"
    dest: "{{unbound.server.directory}}/{{unbound.server.ssl_service_key}}"
    state: link
    # mode: 0600

- name: Copy fullchain.pem
  file:
    src: "{{unbound_tls_dehydrated_etc}}/certs/{{unbound_tls_domain}}/fullchain.pem"
    dest: "{{unbound.server.directory}}/{{unbound.server.ssl_service_pem}}"
    state: link
    # mode: 0600

- name: Setup cron job (run every-7-days)
  template:
    src: "dehydrated-cron.sh"
    dest: "{{unbound_tls_dehydrated_src}}/dehydrated-cron.sh"
    mode: 755

- name: Setup cron job (run every-7-days)
  cron:
    name: "Dehydrated - Renew Certificate"
    job: "{{{unbound_tls_dehydrated_src}}/dehydrated-cron.sh"
    # job: "{{unbound_tls_dehydrated_src}}/dehydrated -c"
    # https://crontab.guru/every-7-days
    minute: 0
    hour: 0
    weekday: 0 # Sunday

- name: Get certificate fingerprint
  shell: "openssl x509 -in {{unbound.server.directory}}/{{unbound.server.ssl_service_pem}} -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64"
  args:
    executable: bash
  register: unbound_fingerprint
  changed_when: false

- name: Display fingerprint and example Stubby config
  debug:
    msg:
      upstream_recursive_servers:
        address_data: "{{ansible_default_ipv4.address if ansible_default_ipv4 is defined else \"<the server's ip address>\"}}"
        tls_auth_name: "{{unbound_tls_domain}}"
        tls_pubkey_pinset:
          digest: "sha256"
          value: "{{unbound_fingerprint.stdout}}"
  when: not ansible_check_mode
