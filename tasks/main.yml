---
- name: Read platform variables
  include_vars:
    file: "{{ ansible_os_family }}.yml"
  tags: [always]

- name: Display init system
  debug:
    var: ansible_service_mgr

- name: Install bash (used for shell scripts/commands)
  package:
    name: bash
    state: present

- name: Install wget (used for roothints updating)
  package:
    name: wget
    state: present

- name: Install unbound from package
  package:
    name: unbound
    state: present
  when: unbound_compile is not defined or unbound_compile == false

- name: Prepare to compile unbound
  import_tasks: compile.yml
  when: unbound_compile is defined and unbound_compile == true

- name: Get unbound version
  shell: "unbound -h | grep Version | cut -d ' ' -f2"
  args:
    executable: bash
  register: unbound_version
  changed_when: false
  check_mode: false

- name: Display unbound version
  debug:
    msg: "{{unbound_version.stdout}}"

- name: Prepare dns-over-tls
  import_tasks: dns-over-tls.yml
  when: unbound.server.ssl_service_key is defined and unbound.server.ssl_service_pem is defined and unbound_tls_domain is defined and unbound_tls_cert_provider != "acme-cf"

- name: Prepare dns-over-tls with acme and cloudflare
  import_tasks: cloudflare-acme.yml
  when: unbound.server.ssl_service_key is defined and unbound.server.ssl_service_pem is defined and unbound_tls_domain is defined and unbound_tls_cert_provider == "acme-cf"

# fix: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=763901
- name: Set unbound folder permissions
  file:
    path: "{{unbound.server.directory}}"
    owner: "{{unbound.server.username}}"
    group: "{{unbound.server.username}}"
  ignore_errors: "{{ ansible_check_mode }}"

# https://www.internic.net/domain/named.cache
# Please update root.hints every six months or so
- name: Get root-hints cache
  get_url:
    url: https://www.internic.net/domain/named.root
    dest: "{{unbound.server.directory}}/{{unbound.server.root_hints}}"

# https://www.iana.org/dnssec/files
# - name: Get ICANN certificates for S/MIME signature (inbuild cert is valid until 2029)
#   get_url:
#     url: https://data.iana.org/root-anchors/icannbundle.pem
#     dest: "{{unbound.server.directory}}/icannbundle.pem"

###
# fix: ldns error while converting string to RR: Syntax error, could not parse the RR's TTL
#     failed to load trust anchor from /etc/unbound/root.key at line x, skipping
#     error reading auto-trust-anchor-file
# in CentOS 7
- name: Check if auto_trust_anchor_file exist
  stat:
    path: "{{unbound.server.directory}}/{{unbound.server.auto_trust_anchor_file}}"
  register: auto_trust_anchor_file
  check_mode: no

- name: Install awk (used for shell scripts/commands)
  package:
    name: gawk
    state: present
  when: ansible_os_family == 'RedHat' and auto_trust_anchor_file.stat.exists == True

- name: Check whether auto_trust_anchor_file contains "root key in bind format"
  command: awk '/root key in bind format/' {{unbound.server.directory}}/{{unbound.server.auto_trust_anchor_file}}
  register: is_bind_format
  changed_when: false
  when: ansible_os_family == 'RedHat' and auto_trust_anchor_file.stat.exists == True
  check_mode: no

- name: Remove old bind formatted root.key for DNSSEC in RedHat systems
  file:
    path: "{{unbound.server.directory}}/{{unbound.server.auto_trust_anchor_file}}"
    state: absent
  when: ansible_os_family == 'RedHat' and auto_trust_anchor_file.stat.exists == True and is_bind_format.stdout != ""
### endfix

- name: Setup or update of the root trust anchor for DNSSEC validation
  # command: "unbound-anchor -a {{unbound.server.directory}}/{{unbound.server.auto_trust_anchor_file}} -c {{unbound.server.directory}}/icannbundle.pem"
  command: unbound-anchor -a "{{unbound.server.directory}}/{{unbound.server.auto_trust_anchor_file}}"
  register: unbound_anchor_result
  changed_when: "unbound_anchor_result.rc == 1"
  failed_when: "unbound_anchor_result.rc == 2"
  # Return value 1 = updated
  # Return value 0 = no update was necessary, updated with RFC5011tracking, or an error occurred

- name: Setup unbound-control keys
  command: "unbound-control-setup -d {{unbound.server.directory}}"
  args:
    creates: "{{unbound.server.directory}}/unbound_control.pem"

- name: Copy unbound configuration
  template:
    src: unbound.conf
    dest: "{{unbound.server.directory}}/unbound.conf"
  notify: Restart unbound

- name: Check unbound configuration
  command: "unbound-checkconf {{unbound.server.directory}}/unbound.conf"
  changed_when: false
  check_mode: no
  ignore_errors: "{{ ansible_check_mode }}"

# SELinux
- name: Configure ports for SELinux (install policycoreutils-python)
  package:
    name: policycoreutils-python  # install semanage
    state: present
  when: ansible_selinux.status is defined and ansible_selinux.status != "Missing selinux Python library"

- name: Configure ports for SELinux (mark udp port for dns)
  seport:
    ports: "{{unbound.server.port}}"
    proto: udp
    setype: dns_port_t
    state: present
  when: ansible_selinux.status is defined and ansible_selinux.status != "Missing selinux Python library"

- name: Configure ports for SELinux (mark tcp port for dns)
  seport:
    ports: "{{unbound.server.port}}"
    proto: tcp
    setype: dns_port_t
    state: present
  when: ansible_selinux.status is defined and ansible_selinux.status != "Missing selinux Python library"

- name: Create /dev folder to chroot
  file:
    path: "{{unbound.server.directory}}/dev/"
    state: directory
  when: unbound.server.chroot is defined and unbound.server.chroot != ""

- name: Mount devfs to chroot - FreeBSD
  mount:
    path: "{{unbound.server.directory}}/dev"
    src: /dev
    fstype: devfs
    opts: ro
    state: mounted
  when: ansible_os_family == 'FreeBSD' and unbound.server.chroot is defined and unbound.server.chroot != ""  # TODO work with jails

- name: Mount devtmpfs to chroot - Debian and RedHat
  mount:
    path: "{{unbound.server.directory}}/dev"
    src: /dev
    fstype: devtmpfs
    opts: ro
    state: mounted
  when: (ansible_os_family == 'Debian' or ansible_os_family == 'RedHat') and unbound.server.chroot is defined and unbound.server.chroot != ""

- name: Install roothints.service - systemd
  template:
    src: roothints.service
    dest: /etc/systemd/system/roothints.service
  when: ansible_service_mgr == 'systemd' and not ansible_check_mode

- name: Install roothints.timer - systemd
  template:
    src: roothints.timer
    dest: /etc/systemd/system/roothints.timer
  when: ansible_service_mgr == 'systemd' and not ansible_check_mode

- name: Ensure unbound is running
  service:
    name: unbound
    state: started
    enabled: true
    # pattern: unbound
