---
- name: read platform variables
  include_vars:
    file: "{{ ansible_os_family }}.yml"
  tags: [always]

- name: Install unbound
  package:
    name: unbound
    state: present
#  when: ansible_os_family != 'FreeBSD'

# - name: Install unbound from port
#   portinstall:
#     name: unbound
#     state: present
#   when: ansible_os_family == 'FreeBSD'

# fix: ldns error while converting string to RR: Syntax error, could not parse the RR's TTL
#     failed to load trust anchor from /etc/unbound/root.key at line x, skipping
#     error reading auto-trust-anchor-file
# in CentOS 7
- name: Remove old bind formatted root.key for DNSSEC in RedHat systems
  file:
    path: "{{server.auto_trust_anchor_file}}"
    state: absent
  when: ansible_os_family == 'RedHat'

- name: Setup or update of the root trust anchor for DNSSEC validation
  command: unbound-anchor -a "{{server.directory}}/{{server.auto_trust_anchor_file}}"
  register: unbound_anchor_result
  changed_when: "unbound_anchor_result.rc == 1"
  failed_when: false # ignore failure silently FixMe
  # Return value 1 = updated
  # Return value 0 = no update was necessary, updated with RFC5011tracking, or an error occurred

- name: Check if unbound_control.pem file exists
  stat:
    path: "{{server.directory}}/unbound_control.pem"
  register: generate_control_cert

- name: Setup unbound-control
  when: not generate_control_cert.stat.exists
  command: unbound-control-setup

# https://www.internic.net/domain/named.cache
# Please update root.hints every six months or so
- name: Get root-hints cache
  get_url:
    url: https://www.internic.net/domain/named.root
    dest: "{{server.directory}}/{{server.root_hints}}"

# https://github.com/jedisct1/dnscrypt-server-docker/blob/master/unbound.sh
- name: Set cache_memory variable from shell command
  shell: "{{_unbound.memory_script}}"
  args:
    executable: bash
  register: cache_memory
  check_mode: no

# - debug: msg="{{ cache_memory.stdout }}"

- name: Set threads variable from shell command
  shell: "if [ $(nproc) -gt 1 ]; then echo $(($(nproc)-1)); else echo 1; fi"
  args:
    executable: bash
  register: threads
  check_mode: no

# - debug: msg="{{ threads.stdout }}"

- name: Copy unbound configuration
  template:
    src: unbound.conf
    dest: "{{server.directory}}/unbound.conf"

- name: Set appropreate file permissions
  file:
    path: "{{server.directory}}"
    owner: unbound
    group: unbound
    recurse: yes

- name: Check unbound configuration
  command: unbound-checkconf
  check_mode: no

# SELinux
- name: Configure ports for SELinux (install policycoreutils-python)
  package:
    name: policycoreutils-python # install semanage
    state: present
  when: ansible_selinux.status != "Missing selinux Python library"

- name: Configure ports for SELinux (mark udp port for dns)
  seport:
    ports: "{{server.port}}"
    proto: udp
    setype: dns_port_t
    state: present
  when: ansible_selinux.status != "Missing selinux Python library"

- name: Configure ports for SELinux (mark tcp port for dns)
  seport:
    ports: "{{server.port}}"
    proto: tcp
    setype: dns_port_t
    state: present
  when: ansible_selinux.status != "Missing selinux Python library"

- name: Ensure unbound is running
  service:
    name: unbound
    state: started
    enabled: true
    pattern: unbound
