---
- name: read platform variables
  include_vars:
    file: "{{ ansible_os_family }}.yml"
  tags: [always]

- name: Display init system
  debug:
    var: ansible_service_mgr

- name: Install bash (used for shell scripts/commands)
  package:
    name: bash
    state: present

- name: Install unbound from package
  package:
    name: unbound
    state: present
  when: unbound_compile is not defined or unbound_compile == false

- name: Prepare to compile unbound
  import_tasks: compile.yml
  when: unbound_compile is defined and unbound_compile == true

- name: Get unbound version
  shell: "unbound -h | grep Version"
  args:
    executable: bash
  register: unbound_version
  changed_when: false

- name: Display unbound version
  debug:
    msg: "{{unbound_version.stdout}}"

- name: Prepare dns-over-tls
  import_tasks: dns-over-tls.yml
  when: unbound.server.ssl_service_key is defined and unbound.server.ssl_service_pem is defined and unbound_tls_domain is defined

# fix: ldns error while converting string to RR: Syntax error, could not parse the RR's TTL
#     failed to load trust anchor from /etc/unbound/root.key at line x, skipping
#     error reading auto-trust-anchor-file
# in CentOS 7
- name: Remove old bind formatted root.key for DNSSEC in RedHat systems
  file:
    path: "{{unbound.server.directory}}/{{unbound.server.auto_trust_anchor_file}}"
    state: absent
  when: ansible_os_family == 'RedHat'

- name: Setup or update of the root trust anchor for DNSSEC validation
  command: unbound-anchor -a "{{unbound.server.directory}}/{{unbound.server.auto_trust_anchor_file}}"
  register: unbound_anchor_result
  changed_when: "unbound_anchor_result.rc == 1"
  failed_when: false  # ignore failure silently
  # Return value 1 = updated
  # Return value 0 = no update was necessary, updated with RFC5011tracking, or an error occurred

- name: Setup unbound-control keys
  command: "unbound-control-setup -d {{unbound.server.directory}}"
  args:
    creates: "{{unbound.server.directory}}/unbound_control.pem"

# https://www.internic.net/domain/named.cache
# Please update root.hints every six months or so
- name: Get root-hints cache
  get_url:
    url: https://www.internic.net/domain/named.root
    dest: "{{unbound.server.directory}}/{{unbound.server.root_hints}}"

- name: Set cache_memory variable from shell command
  shell: "{{_unbound.pysical_memory_script}}"
  args:
    executable: bash
  register: cache_memory
  check_mode: no
  changed_when: false
  tags:
    - skip_ansible_lint
# - debug: msg="{{ cache_memory.stdout }}"

- name: Set threads variable from shell command
  shell: "if [ $(nproc) -gt 1 ]; then echo $(($(nproc)-1)); else echo 1; fi"
  args:
    executable: bash
  register: threads
  check_mode: no
  changed_when: false
  tags:
    - skip_ansible_lint
# - debug: msg="{{ threads.stdout }}"

- name: Copy unbound configuration
  template:
    src: unbound.conf
    dest: "{{unbound.server.directory}}/unbound.conf"
  notify: Restart unbound

- name: Set appropreate file permissions
  file:
    path: "{{item}}"
    owner: "{{unbound.server.username}}"
    group: "{{unbound.server.username}}"
  with_items:
    - "{{unbound.server.directory}}/{{unbound.server.auto_trust_anchor_file}}"

- name: Check unbound configuration
  command: "unbound-checkconf {{unbound.server.directory}}/unbound.conf"
  changed_when: false
  check_mode: no

# SELinux
- name: Configure ports for SELinux (install policycoreutils-python)
  package:
    name: policycoreutils-python  # install semanage
    state: present
  when: ansible_selinux.status != "Missing selinux Python library"

- name: Configure ports for SELinux (mark udp port for dns)
  seport:
    ports: "{{unbound.server.port}}"
    proto: udp
    setype: dns_port_t
    state: present
  when: ansible_selinux.status != "Missing selinux Python library"

- name: Configure ports for SELinux (mark tcp port for dns)
  seport:
    ports: "{{unbound.server.port}}"
    proto: tcp
    setype: dns_port_t
    state: present
  when: ansible_selinux.status != "Missing selinux Python library"

- name: Create /dev folder to chroot - FreeBSD
  file:
    path: "{{unbound.server.directory}}/dev/"
    state: directory

- name: Mount devfs to chroot
  mount:
    path: "{{unbound.server.directory}}/dev"
    src: /dev
    fstype: devfs
    opts: ro
    state: mounted
  when: ansible_os_family == 'FreeBSD'  # TODO work with jails

- name: Mount devtmpfs to chroot - Debian and RedHat
  mount:
    path: "{{unbound.server.directory}}/dev"
    src: /dev
    fstype: devtmpfs
    opts: ro
    state: mounted
  when: ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'

- name: Ensure unbound is running
  service:
    name: unbound
    state: started
    enabled: true
    pattern: unbound
